import sys
from contextlib import closing
from six import StringIO
from gym import utils
from gym.envs.toy_text import discrete
import numpy as np
#MAP = [
#    "+---------+",
#    "|R: | : :G|",
#    "| : | : : |",
#    "| : : : : |",
#    "| | : | : |",
#    "|Y| : |B: |",
#    "+---------+",
#]
# Скорее не нужна
class MirrorENV(discrete.DiscreteEnv):
    """
    Description:
    There is a mirror, which is moved by 5 motors. Each motor moves mirror into the specific direction. The main task is to find 
    most suitable mirror position according to the Zernike polinomials. 
    The end of the episode is when the mirror in the most suitable position.
    Observations: 
    There are ??? discrete states since there are ??? mirror positions.
        
    Actions:
    There are 45 discrete deterministic actions: (Imported from MATLAB)
    - 0: sdg1(sg1+a)
    - 1: sdv1(sv1+a)
    - 2: os1(z1+a)
    - 3: gora1(g1+a) 
    - 4: vera1(v1+a)
    - 5: sdg1(sg1-a)
    - 6: sdv1(sv1-a)
    - 7: os1(z1-a)
    - 8: gora1(g1-a)
    - 9: vera1(v1-a)
    - 10: gora1(g1+a)sdg1(sg1+a)
    - 11: vera1(v1+a)sdv1(sv1+a)
    - 12: os1(z1+a)sdg1(sg1+a)
    - 13: os1(z1+a)sdv1(sv1+a)
    - 14: gora1(g1+a)sdg1(sg1-a)
    - 15: vera1(v1+a)sdv1(sv1-a)
    - 16: os1(z1+a)sdg1(sg1-a)
    - 17: os1(z1+a)sdv1(sv1-a)
    - 18: gora1(g1-a)sdg1(sg1-a)
    - 19: vera1(v1-a)sdv1(sv1-a)
    - 20: os1(z1-a)sdg1(sg1-a)
    - 21: os1(z1-a)sdv1(sv1-a)
    - 22: gora1(g1-a)sdg1(sg1+a)
    - 23: vera1(v1-a)sdv1(sv1+a)
    - 24: os1(z1-a)sdg1(sg1+a)
    - 25: os1(z1-a)sdv1(sv1+a)
    - 26: sdg1(sg1+a)sdv1(sv1+a)
    - 27: sdg1(sg1-a)sdv1(sv1-a)
    - 28: sdg1(sg1+a)sdv1(sv1-a)
    - 29: sdv1(sv1+a)sdg1(sg1-a)
    - 30: gora1(g1+a)sdv1(sv1+a)
    - 31: vera1(v1+a)sdg1(sg1+a)
    - 32: os1(z1+a)gora1(g1+a)
    - 33: os1(z1+a)vera1(v1+a)
    - 34: gora1(g1+a)sdv1(sv1-a)
    - 35: vera1(v1+a)sdg1(sg1-a)
    - 36: os1(z1+a)gora1(g1-a)
    - 37: os1(z1+a)vera1(v1-a)
    - 38: gora1(g1-a)sdv1(sv1+a)
    - 39: vera1(v1-a)sdg1(sg1+a)
    - 40: os1(z1-a)gora1(g1+a)
    - 41: os1(z1-a)vera1(v1+a)
    - 42: gora1(g1-a)sdv1(sv1-a)
    - 43: vera1(v1-a)sdg1(sg1-a)
    - 44: os1(z1-a)gora1(g1-a)
    - 45: os1(z1-a)vera1(v1-a)
    
    Rewards: 
    Reward of -1 for each possible action and an additional reward for completed system.
    Reward of -10 for each unnecessary action.
    
    State space is represented by:
    14 Zernike polinomials (an array) (Imported from MATLAB)
        
    """
    metadata = {'render.modes': ['human', 'ansi']}
    
    def __init__(self):
        self.desc = np.asarray(MAP, dtype='c')

        self.locs = locs = [(0,0), (0,4), (4,0), (4,3)]

        num_states = 500
        num_rows = 5
        num_columns = 5
        max_row = num_rows - 1
        max_col = num_columns - 1
        initial_state_distrib = np.zeros(num_states)
        num_actions = 6
        P = {state: {action: []
                     for action in range(num_actions)} for state in range(num_states)}
        for row in range(num_rows):
            for col in range(num_columns):
                for pass_idx in range(len(locs) + 1):  # +1 for being inside taxi
                    for dest_idx in range(len(locs)):
                        state = self.encode(row, col, pass_idx, dest_idx)
                        if pass_idx < 4 and pass_idx != dest_idx:
                            initial_state_distrib[state] += 1
                        for action in range(num_actions):
                            # defaults
                            new_row, new_col, new_pass_idx = row, col, pass_idx
                            reward = -1 # default reward when there is no pickup/dropoff
                            done = False
                            taxi_loc = (row, col)

                            if action == 0:
                                new_row = min(row + 1, max_row)
                            elif action == 1:
                                new_row = max(row - 1, 0)
                            if action == 2 and self.desc[1 + row, 2 * col + 2] == b":":
                                new_col = min(col + 1, max_col)
                            elif action == 3 and self.desc[1 + row, 2 * col] == b":":
                                new_col = max(col - 1, 0)
                            elif action == 4:  # pickup
                                if (pass_idx < 4 and taxi_loc == locs[pass_idx]):
                                    new_pass_idx = 4
                                else: # passenger not at location
                                    reward = -10
                            elif action == 5:  # dropoff
                                if (taxi_loc == locs[dest_idx]) and pass_idx == 4:
                                    new_pass_idx = dest_idx
                                    done = True
                                    reward = 20
                                elif (taxi_loc in locs) and pass_idx == 4:
                                    new_pass_idx = locs.index(taxi_loc)
                                else: # dropoff at wrong location
                                    reward = -10
                            new_state = self.encode(
                                new_row, new_col, new_pass_idx, dest_idx)
                            P[state][action].append(
                                (1.0, new_state, reward, done))
        initial_state_distrib /= initial_state_distrib.sum()
        discrete.DiscreteEnv.__init__(
            self, num_states, num_actions, P, initial_state_distrib)

    def encode(self, taxi_row, taxi_col, pass_loc, dest_idx):
        # (5) 5, 5, 4
        i = taxi_row
        i *= 5
        i += taxi_col
        i *= 5
        i += pass_loc
        i *= 4
        i += dest_idx
        return i

    def decode(self, i):
        out = []
        out.append(i % 4)
        i = i // 4
        out.append(i % 5)
        i = i // 5
        out.append(i % 5)
        i = i // 5
        out.append(i)
        assert 0 <= i < 5
        return reversed(out)

    def render(self, mode='human'):
        outfile = StringIO() if mode == 'ansi' else sys.stdout

        out = self.desc.copy().tolist()
        out = [[c.decode('utf-8') for c in line] for line in out]
        taxi_row, taxi_col, pass_idx, dest_idx = self.decode(self.s)

        def ul(x): return "_" if x == " " else x
        if pass_idx < 4:
            out[1 + taxi_row][2 * taxi_col + 1] = utils.colorize(
                out[1 + taxi_row][2 * taxi_col + 1], 'yellow', highlight=True)
            pi, pj = self.locs[pass_idx]
            out[1 + pi][2 * pj + 1] = utils.colorize(out[1 + pi][2 * pj + 1], 'blue', bold=True)
        else:  # passenger in taxi
            out[1 + taxi_row][2 * taxi_col + 1] = utils.colorize(
                ul(out[1 + taxi_row][2 * taxi_col + 1]), 'green', highlight=True)

        di, dj = self.locs[dest_idx]
        out[1 + di][2 * dj + 1] = utils.colorize(out[1 + di][2 * dj + 1], 'magenta')
        outfile.write("\n".join(["".join(row) for row in out]) + "\n")
        if self.lastaction is not None:
            outfile.write("  ({})\n".format(["South", "North", "East", "West", "Pickup", "Dropoff"][self.lastaction]))
        else: outfile.write("\n")

        # No need to return anything for human
        if mode != 'human':
            with closing(outfile):
                return outfile.getvalue()
